import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", layout="wide")
st.image("orig.png", width=120)
st.title("–î–∞—à–±–æ—Ä–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—Ä–æ–±–ª–µ–º")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏", type="json")

if uploaded_file is not None:
    try:
        reviews_data = json.load(uploaded_file)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        reviews_df = pd.DataFrame(reviews_data["data"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        start_date = datetime(2024, 1, 1)
        end_date = datetime(2025, 5, 31)
        date_range = (end_date - start_date).days
        
        reviews_df['date'] = [start_date + timedelta(days=random.randint(0, date_range)) 
                             for _ in range(len(reviews_df))]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
        def fetch_predictions(data):
            url = "http://localhost:8000/predict"
            response = requests.post(url, json=data)
            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.text}")
                return None

        predictions_data = fetch_predictions(reviews_data)

        if predictions_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            flat_data = []
            for pred in predictions_data:
                for topic, sentiment in zip(pred["topics"], pred["sentiments"]):
                    flat_data.append({
                        "id": pred["id"], 
                        "topic": topic, 
                        "sentiment": sentiment
                    })
            flat_df = pd.DataFrame(flat_data)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            merged_df = reviews_df.merge(flat_df, on="id", how="left")
            
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            min_date = merged_df["date"].min().date()
            max_date = merged_df["date"].max().date()
            
            date_range = st.sidebar.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                value=(min_date, max_date),
                min_value=min_date,
                max_value=max_date
            )
            
            if len(date_range) == 2:
                start_date_filter, end_date_filter = date_range
                filtered_df = merged_df[
                    (merged_df["date"].dt.date >= start_date_filter) & 
                    (merged_df["date"].dt.date <= end_date_filter)
                ]
            else:
                filtered_df = merged_df
            
            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥
            st.header("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥")
            topics = sorted(filtered_df["topic"].unique())
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ —Ç–µ–º", len(topics))
            with col2:
                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(filtered_df))
            with col3:
                st.metric("–ü–µ—Ä–∏–æ–¥", f"{date_range[0]} - {date_range[1]}")
            
            st.write("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**", ", ".join(topics))
            
            # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É/—É—Å–ª—É–≥–µ
            st.header("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º/—É—Å–ª—É–≥–∞–º")
            
            for topic in topics:
                with st.expander(f"üîç {topic}", expanded=False):
                    topic_data = filtered_df[filtered_df["topic"] == topic]
                    total_reviews = len(topic_data)
                    
                    if total_reviews > 0:
                        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                        sentiment_counts = topic_data["sentiment"].value_counts()
                        sentiment_percent = (sentiment_counts / total_reviews * 100).round(1)
                        
                        col1, col2, col3 = st.columns(3)
                        
                        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–†–£–ì–û–í–ê–Ø –î–ò–ê–ì–†–ê–ú–ú–ê
                        with col1:
                            st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                            pie_data = []
                            for sentiment in ['positive', 'neutral', 'negative']:
                                count = sentiment_counts.get(sentiment, 0)
                                percent = sentiment_percent.get(sentiment, 0)
                                if count > 0:
                                    pie_data.append({
                                        'sentiment': sentiment,
                                        'count': count,
                                        'percent': percent
                                    })
                            
                            if pie_data:
                                pie_df = pd.DataFrame(pie_data)
                                
                                fig_pie = px.pie(
                                    pie_df,
                                    values='count',
                                    names='sentiment',
                                    color='sentiment',
                                    color_discrete_map={
                                        'positive': '#2E8B57',
                                        'negative': '#DC143C', 
                                        'neutral': '#FFD700'
                                    },
                                    hole=0.3
                                )
                                
                                fig_pie.update_traces(
                                    textinfo='percent+label',
                                    hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}'
                                )
                                
                                st.plotly_chart(fig_pie, use_container_width=True)
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        
                        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–û–õ–ë–ß–ê–¢–ê–Ø –î–ò–ê–ì–†–ê–ú–ú–ê
                        with col2:
                            st.subheader("–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
                            bar_data = []
                            for sentiment in ['positive', 'neutral', 'negative']:
                                count = sentiment_counts.get(sentiment, 0)
                                bar_data.append({
                                    'sentiment': sentiment,
                                    'count': count
                                })
                            
                            bar_df = pd.DataFrame(bar_data)
                            
                            fig_bar = px.bar(
                                bar_df,
                                x='sentiment',
                                y='count',
                                color='sentiment',
                                color_discrete_map={
                                    'positive': '#2E8B57',
                                    'negative': '#DC143C', 
                                    'neutral': '#FFD700'
                                },
                                text='count'
                            )
                            
                            fig_bar.update_layout(
                                showlegend=False,
                                xaxis_title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
                                yaxis=dict(range=[0, max(bar_df['count'].max() + 1, 5)])
                            )
                            
                            fig_bar.update_traces(
                                texttemplate='%{text}',
                                textposition='outside'
                            )
                            
                            st.plotly_chart(fig_bar, use_container_width=True)
                        
                        # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
                        with col3:
                            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                            st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", total_reviews)
                            
                            for sentiment in ['positive', 'neutral', 'negative']:
                                count = sentiment_counts.get(sentiment, 0)
                                percent = sentiment_percent.get(sentiment, 0)
                                
                                # –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                                icon = {
                                    'positive': 'üü¢',
                                    'neutral': '‚ö™', 
                                    'negative': 'üî¥'
                                }.get(sentiment, '‚ö™')
                                
                                st.metric(
                                    f"{icon} {sentiment.capitalize()}",
                                    f"{count} ({percent}%)"
                                )
                        
                        # –ö–õ–Æ–ß–ï–í–´–ï –ê–°–ü–ï–ö–¢–´
                        st.subheader("üìù –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã")
                        
                        positive_aspects = topic_data[topic_data["sentiment"] == "positive"]["text"].head(3)
                        negative_aspects = topic_data[topic_data["sentiment"] == "negative"]["text"].head(3)
                        neutral_aspects = topic_data[topic_data["sentiment"] == "neutral"]["text"].head(3)
                        
                        col4, col5, col6 = st.columns(3)
                        
                        with col4:
                            if len(positive_aspects) > 0:
                                st.write("**‚úÖ –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                                for text in positive_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("**‚úÖ –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                                st.write("–ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                        
                        with col5:
                            if len(neutral_aspects) > 0:
                                st.write("**‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:**")
                                for text in neutral_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("**‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:**")
                                st.write("–ù–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                        
                        with col6:
                            if len(negative_aspects) > 0:
                                st.write("**‚ùå –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                                for text in negative_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("**‚ùå –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                                st.write("–ù–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                    
                    else:
                        st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            
            # 4. –î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            st.header("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –í—ã–±–æ—Ä —Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            selected_topics = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏:",
                options=topics,
                default=topics[:2] if len(topics) >= 2 else topics
            )
            
            if selected_topics:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
                time_data = filtered_df[filtered_df["topic"].isin(selected_topics)].copy()
                time_data['month'] = time_data['date'].dt.to_period('M').astype(str)
                
                # 4.1 –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
                
                # –°–æ–∑–¥–∞–µ–º subplot –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
                fig_tonality = make_subplots(
                    rows=len(selected_topics), 
                    cols=1,
                    subplot_titles=[f"–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π: {topic}" for topic in selected_topics],
                    vertical_spacing=0.1
                )
                
                for i, topic in enumerate(selected_topics, 1):
                    topic_time_data = time_data[time_data["topic"] == topic]
                    
                    if not topic_time_data.empty:
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º
                        monthly_sentiment = topic_time_data.groupby(['month', 'sentiment']).size().unstack(fill_value=0)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        monthly_total = monthly_sentiment.sum(axis=1)
                        monthly_percent = monthly_sentiment.div(monthly_total, axis=0) * 100
                        
                        for sentiment in ['positive', 'neutral', 'negative']:
                            if sentiment in monthly_percent.columns:
                                fig_tonality.add_trace(
                                    go.Scatter(
                                        x=monthly_percent.index,
                                        y=monthly_percent[sentiment],
                                        name=f"{topic} - {sentiment}",
                                        mode='lines+markers',
                                        legendgroup=topic,
                                        showlegend=(i == 1)
                                    ),
                                    row=i, col=1
                                )
                
                fig_tonality.update_layout(height=300 * len(selected_topics), title_text="–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ–ª–µ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π")
                st.plotly_chart(fig_tonality, use_container_width=True)
                
                # 4.2 –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤")
                
                fig_volume = go.Figure()
                
                for topic in selected_topics:
                    topic_time_data = time_data[time_data["topic"] == topic]
                    
                    if not topic_time_data.empty:
                        monthly_counts = topic_time_data.groupby('month').size()
                        
                        fig_volume.add_trace(
                            go.Scatter(
                                x=monthly_counts.index,
                                y=monthly_counts.values,
                                name=topic,
                                mode='lines+markers'
                            )
                        )
                
                fig_volume.update_layout(
                    xaxis_title="–ú–µ—Å—è—Ü",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                )
                st.plotly_chart(fig_volume, use_container_width=True)
                
                # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏–∫–∏
                st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏–∫–∏")
                
                pivot_table = time_data.groupby(['month', 'topic', 'sentiment']).size().unstack(fill_value=0)
                st.dataframe(pivot_table)

        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç API.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")