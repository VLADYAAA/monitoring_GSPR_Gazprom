import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", layout="wide")
st.image("orig.png", width=120)
st.title("–î–∞—à–±–æ—Ä–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—Ä–æ–±–ª–µ–º")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏", type="json")

if uploaded_file is not None:
    try:
        reviews_data = json.load(uploaded_file)

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        reviews_df = pd.DataFrame(reviews_data["data"])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        start_date = datetime(2024, 1, 1)
        end_date = datetime(2025, 5, 31)
        date_range = (end_date - start_date).days

        reviews_df['date'] = [
            start_date + timedelta(days=random.randint(0, date_range))
            for _ in range(len(reviews_df))
        ]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
        def fetch_predictions(data):
            url = "http://localhost:8000/predict"
            response = requests.post(url, json=data)
            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.text}")
                return None

        predictions_data = fetch_predictions(reviews_data)

        if predictions_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            flat_data = []
            for pred in predictions_data:
                for topic, sentiment in zip(pred["topics"], pred["sentiments"]):
                    flat_data.append({
                        "id": pred["id"],
                        "topic": topic,
                        "sentiment": sentiment
                    })
            flat_df = pd.DataFrame(flat_data)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            merged_df = reviews_df.merge(flat_df, on="id", how="left")

            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")

            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            min_date = merged_df["date"].min().date()
            max_date = merged_df["date"].max().date()

            date_range = st.sidebar.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                value=(min_date, max_date),
                min_value=min_date,
                max_value=max_date
            )

            if len(date_range) == 2:
                start_date_filter, end_date_filter = date_range
                filtered_df = merged_df[
                    (merged_df["date"].dt.date >= start_date_filter) &
                    (merged_df["date"].dt.date <= end_date_filter)
                ]
            else:
                filtered_df = merged_df

            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥
            st.header("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ topics - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            topics = sorted([str(topic) for topic in filtered_df["topic"].unique()])
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ —Ç–µ–º", len(topics))
            with col2:
                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(filtered_df))
            with col3:
                st.metric("–ü–µ—Ä–∏–æ–¥", f"{date_range[0]} - {date_range[1]}")

            st.write("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**", ", ".join(topics))

            # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É/—É—Å–ª—É–≥–µ
            st.header("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º/—É—Å–ª—É–≥–∞–º")

            for i, topic in enumerate(topics):
                with st.expander(f"üîç {topic}", expanded=False):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º topic –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    topic_str = str(topic)
                    topic_data = filtered_df[filtered_df["topic"].astype(str) == topic_str]
                    total_reviews = len(topic_data)

                    if total_reviews > 0:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–ï–ú–´
                        sentiment_counts = topic_data["sentiment"].value_counts()

                        chart_data = []
                        for sentiment in ['positive', 'neutral', 'negative']:
                            count = sentiment_counts.get(sentiment, 0)
                            percent = round((count / total_reviews) * 100, 1) if total_reviews > 0 else 0
                            chart_data.append({
                                'sentiment': sentiment,
                                'count': count,
                                'percent': percent
                            })

                        chart_df = pd.DataFrame(chart_data)

                        col1, col2, col3 = st.columns(3)

                        # --- Pie chart ---
                        with col1:
                            st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chart_df –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ
                            pie_df = chart_df[chart_df['count'] > 0]

                            if not pie_df.empty:
                                fig_pie = px.pie(
                                    pie_df,
                                    values='count',
                                    names='sentiment',
                                    color='sentiment',
                                    color_discrete_map={
                                        'positive': '#00CC66',
                                        'negative': '#FF3333',
                                        'neutral': '#FFCC00'
                                    },
                                    hole=0.4
                                )
                                fig_pie.update_traces(
                                    textinfo='label+percent',
                                    hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–î–æ–ª—è: %{percent}'
                                )
                                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                                st.plotly_chart(fig_pie, use_container_width=True, key=f"pie_{topic}_{i}")
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã")

                        # --- Bar chart ---
                        with col2:
                            st.subheader("–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º chart_df –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ
                            fig_bar = px.bar(
                                chart_df,
                                x='sentiment',
                                y='count',
                                color='sentiment',
                                color_discrete_map={
                                    'positive': '#00CC66',
                                    'negative': '#FF3333',
                                    'neutral': '#FFCC00'
                                },
                                text='count'
                            )
                            fig_bar.update_traces(
                                texttemplate='%{text}',
                                textposition='outside'
                            )
                            fig_bar.update_layout(
                                xaxis_title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                                plot_bgcolor='white',
                                showlegend=False
                            )
                            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                            st.plotly_chart(fig_bar, use_container_width=True, key=f"bar_{topic}_{i}")

                        # --- –¶–∏—Ñ—Ä—ã ---
                        with col3:
                            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                            st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", total_reviews)
                            st.write("---")

                            icon_map = {'positive': 'üü¢', 'neutral': '‚ö™', 'negative': 'üî¥'}

                            for row in chart_data:
                                st.metric(
                                    label=f"{icon_map[row['sentiment']]} {row['sentiment'].capitalize()}",
                                    value=f"{row['count']} –æ—Ç–∑—ã–≤–æ–≤",
                                    delta=f"{row['percent']}%"
                                )

                        # --- –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã ---
                        st.subheader("üìù –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã")

                        positive_aspects = topic_data[topic_data["sentiment"] == "positive"]["text"].head(3)
                        neutral_aspects = topic_data[topic_data["sentiment"] == "neutral"]["text"].head(3)
                        negative_aspects = topic_data[topic_data["sentiment"] == "negative"]["text"].head(3)

                        col4, col5, col6 = st.columns(3)

                        with col4:
                            st.write("**‚úÖ –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                            if len(positive_aspects) > 0:
                                for text in positive_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("–ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

                        with col5:
                            st.write("**‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:**")
                            if len(neutral_aspects) > 0:
                                for text in neutral_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("–ù–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

                        with col6:
                            st.write("**‚ùå –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**")
                            if len(negative_aspects) > 0:
                                for text in negative_aspects:
                                    st.write(f"‚Ä¢ {text}")
                            else:
                                st.write("–ù–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

                    else:
                        st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

            # --- –î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ---
            st.header("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")

            selected_topics = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏:",
                options=topics,
                default=topics[:2] if len(topics) >= 2 else topics,
                key="topic_selector"
            )

            if selected_topics:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º selected_topics –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                selected_topics_str = [str(topic) for topic in selected_topics]
                time_data = filtered_df[filtered_df["topic"].astype(str).isin(selected_topics_str)].copy()
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                time_data['month'] = time_data['date'].dt.strftime('%Y-%m')
                time_data = time_data.sort_values('date')

                # --- –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π ---
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")
                
                if len(selected_topics) > 0:
                    fig_tonality = make_subplots(
                        rows=len(selected_topics),
                        cols=1,
                        subplot_titles=[f"{topic}" for topic in selected_topics],
                        vertical_spacing=0.1
                    )

                    for i, topic in enumerate(selected_topics, 1):
                        topic_str = str(topic)
                        topic_time_data = time_data[time_data["topic"].astype(str) == topic_str]

                        if not topic_time_data.empty:
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ)
                            monthly_sentiment = (
                                topic_time_data
                                .groupby(['month', 'sentiment'])
                                .size()
                                .unstack(fill_value=0)
                            )
                            
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                            for sentiment in ['positive', 'neutral', 'negative']:
                                if sentiment not in monthly_sentiment.columns:
                                    monthly_sentiment[sentiment] = 0

                            monthly_total = monthly_sentiment.sum(axis=1)
                            monthly_percent = (monthly_sentiment.div(monthly_total, axis=0) * 100).fillna(0)

                            for sentiment in ['positive', 'neutral', 'negative']:
                                fig_tonality.add_trace(
                                    go.Scatter(
                                        x=monthly_percent.index,
                                        y=monthly_percent[sentiment],
                                        name=f"{topic} - {sentiment}",
                                        mode='lines+markers',
                                        legendgroup=topic,
                                        showlegend=(i == 1)
                                    ),
                                    row=i, col=1
                                )

                    fig_tonality.update_layout(height=300 * len(selected_topics),
                                               title_text="–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ–ª–µ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π")
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    st.plotly_chart(fig_tonality, use_container_width=True, key="tonality_dynamic")

                    # --- –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ---
                    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤")

                    fig_volume = go.Figure()

                    for topic in selected_topics:
                        topic_str = str(topic)
                        topic_time_data = time_data[time_data["topic"].astype(str) == topic_str]

                        if not topic_time_data.empty:
                            monthly_counts = topic_time_data.groupby('month').size()

                            fig_volume.add_trace(
                                go.Scatter(
                                    x=monthly_counts.index,
                                    y=monthly_counts.values,
                                    name=topic,
                                    mode='lines+markers'
                                )
                            )

                    fig_volume.update_layout(
                        xaxis_title="–ú–µ—Å—è—Ü",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
                        title="–î–∏–Ω–∞–º–∏–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                    st.plotly_chart(fig_volume, use_container_width=True, key="volume_dynamic")

                    # --- –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ---
                    st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏–∫–∏")
                    pivot_table = (
                        time_data
                        .groupby(['month', 'topic', 'sentiment'])
                        .size()
                        .unstack(fill_value=0)
                    )
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    for sentiment in ['positive', 'neutral', 'negative']:
                        if sentiment not in pivot_table.columns:
                            pivot_table[sentiment] = 0
                    
                    st.dataframe(pivot_table)

        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç API.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")