import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", layout="wide")
st.image("orig.png", width=120)
st.title("–î–∞—à–±–æ—Ä–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—Ä–æ–±–ª–µ–º")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏", type="json")

if uploaded_file is not None:
    try:
        reviews_data = json.load(uploaded_file)
        
        # –î–ï–ë–ê–ì: –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏
        st.sidebar.write("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:", len(reviews_data["data"]))
        st.sidebar.write("üìù –ü—Ä–∏–º–µ—Ä –æ—Ç–∑—ã–≤–∞:", reviews_data["data"][0] if reviews_data["data"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        reviews_df = pd.DataFrame(reviews_data["data"])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        start_date = datetime(2024, 1, 1)
        end_date = datetime(2025, 5, 31)
        date_range = (end_date - start_date).days

        reviews_df['date'] = [
            start_date + timedelta(days=random.randint(0, date_range))
            for _ in range(len(reviews_df))
        ]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
        def fetch_predictions(data):
            url = "http://localhost:8000/predict"
            try:
                response = requests.post(url, json=data, timeout=30)
                if response.status_code == 200:
                    return response.json()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code} - {response.text}")
                    return None
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
                return None

        predictions_data = fetch_predictions(reviews_data)

        if predictions_data:
            # –î–ï–ë–ê–ì: –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ API
            st.sidebar.write("üéØ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:", len(predictions_data))
            st.sidebar.write("üìä –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", predictions_data[0] if predictions_data else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            flat_data = []
            for pred in predictions_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–º—ã –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                if pred.get("topics") and pred.get("sentiments"):
                    for topic, sentiment in zip(pred["topics"], pred["sentiments"]):
                        flat_data.append({
                            "id": pred["id"],
                            "topic": topic,
                            "sentiment": sentiment
                        })
                else:
                    st.warning(f"–ù–µ—Ç —Ç–µ–º –∏–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: {pred.get('id')}")
            
            flat_df = pd.DataFrame(flat_data)
            
            # –î–ï–ë–ê–ì: –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not flat_df.empty:
                st.sidebar.write("üé≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:", flat_df["sentiment"].unique().tolist())
                st.sidebar.write("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã:", flat_df["topic"].unique().tolist())
                st.sidebar.write("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π:", flat_df["sentiment"].value_counts().to_dict())

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            merged_df = reviews_df.merge(flat_df, on="id", how="left")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            if merged_df.empty:
                st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")
                st.stop()

            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")

            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            min_date = merged_df["date"].min().date()
            max_date = merged_df["date"].max().date()

            date_range = st.sidebar.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                value=(min_date, max_date),
                min_value=min_date,
                max_value=max_date
            )

            if len(date_range) == 2:
                start_date_filter, end_date_filter = date_range
                filtered_df = merged_df[
                    (merged_df["date"].dt.date >= start_date_filter) &
                    (merged_df["date"].dt.date <= end_date_filter)
                ]
            else:
                filtered_df = merged_df

            # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥
            st.header("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥")
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã (–∏—Å–∫–ª—é—á–∞–µ–º NaN)
            topics = sorted([str(topic) for topic in filtered_df["topic"].unique() if pd.notna(topic)])
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ —Ç–µ–º", len(topics))
            with col2:
                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(filtered_df))
            with col3:
                st.metric("–ü–µ—Ä–∏–æ–¥", f"{date_range[0]} - {date_range[1]}" if len(date_range) == 2 else "–ù–µ –≤—ã–±—Ä–∞–Ω")

            st.write("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:**", ", ".join(topics) if topics else "–ù–µ—Ç —Ç–µ–º")

            # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É/—É—Å–ª—É–≥–µ
            if topics:
                st.header("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º/—É—Å–ª—É–≥–∞–º")

                for i, topic in enumerate(topics):
                    with st.expander(f"üîç {topic}", expanded=False):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–º–µ
                        topic_data = filtered_df[filtered_df["topic"] == topic]
                        total_reviews = len(topic_data)

                        if total_reviews > 0:
                            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                            sentiment_counts = topic_data["sentiment"].value_counts()

                            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                            chart_data = []
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            unique_sentiments = sentiment_counts.index.tolist()
                            
                            for sentiment in unique_sentiments:
                                count = sentiment_counts.get(sentiment, 0)
                                percent = round((count / total_reviews) * 100, 1) if total_reviews > 0 else 0
                                chart_data.append({
                                    'sentiment': sentiment,
                                    'count': count,
                                    'percent': percent
                                })

                            chart_df = pd.DataFrame(chart_data)

                            col1, col2, col3 = st.columns(3)

                            # --- Pie chart ---
                            with col1:
                                st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

                                pie_df = chart_df[chart_df['count'] > 0]

                                if not pie_df.empty:
                                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
                                    fig_pie = px.pie(
                                        pie_df,
                                        values='count',
                                        names='sentiment',
                                        hole=0.4,
                                        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π: {topic}"
                                    )
                                    fig_pie.update_traces(
                                        textinfo='percent+label',
                                        hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–î–æ–ª—è: %{percent}'
                                    )
                                    fig_pie.update_layout(
                                        showlegend=True,
                                        legend=dict(orientation="v", yanchor="auto", y=1, xanchor="auto", x=1)
                                    )
                                    st.plotly_chart(fig_pie, use_container_width=True, key=f"pie_{topic}_{i}")
                                else:
                                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã")

                            # --- Bar chart ---
                            with col2:
                                st.subheader("–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

                                # –°–æ–∑–¥–∞–µ–º –±–∞—Ä—á–∞—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                if not chart_df.empty:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                                    color_map = {
                                        'positive': '#00CC66',
                                        'negative': '#FF3333', 
                                        'neutral': '#FFCC00'
                                    }
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                                    colors = [color_map.get(sentiment, '#CCCCCC') for sentiment in chart_df['sentiment']]
                                    
                                    fig_bar = go.Figure()
                                    fig_bar.add_trace(go.Bar(
                                        x=chart_df['sentiment'],
                                        y=chart_df['count'],
                                        text=chart_df['count'],
                                        textposition='outside',
                                        marker_color=colors,
                                        hovertemplate='<b>%{x}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{y}<extra></extra>'
                                    ))
                                    
                                    fig_bar.update_layout(
                                        title=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {topic}",
                                        xaxis_title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
                                        plot_bgcolor='white',
                                        showlegend=False,
                                        yaxis=dict(zeroline=True, zerolinewidth=1, zerolinecolor='lightgray')
                                    )
                                    st.plotly_chart(fig_bar, use_container_width=True, key=f"bar_{topic}_{i}")
                                else:
                                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")

                            # --- –¶–∏—Ñ—Ä—ã ---
                            with col3:
                                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", total_reviews)
                                st.write("---")

                                # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                                icon_map = {'positive': 'üü¢', 'neutral': 'üü°', 'negative': 'üî¥'}
                                
                                for row in chart_data:
                                    icon = icon_map.get(row['sentiment'], '‚ö´')
                                    st.metric(
                                        label=f"{icon} {row['sentiment']}",
                                        value=f"{row['count']} –æ—Ç–∑—ã–≤–æ–≤",
                                        delta=f"{row['percent']}%"
                                    )

                            # --- –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã ---
                            st.subheader("üìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤")

                            # –ë–µ—Ä–µ–º –ø–æ 2 –ø—Ä–∏–º–µ—Ä–∞ –∫–∞–∂–¥–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                            for sentiment in unique_sentiments:
                                sentiment_data = topic_data[topic_data["sentiment"] == sentiment]
                                if not sentiment_data.empty:
                                    st.write(f"**{sentiment.upper()}:**")
                                    # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
                                    sample_texts = sentiment_data["text"].head(2).tolist()
                                    for text in sample_texts:
                                        st.write(f"‚Ä¢ {text}")
                                    st.write("")

                        else:
                            st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            else:
                st.warning("‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

            # --- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º ---
            st.header("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            if not filtered_df.empty:
                # –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
                overall_sentiment = filtered_df["sentiment"].value_counts()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if not overall_sentiment.empty:
                        fig_overall = px.pie(
                            values=overall_sentiment.values,
                            names=overall_sentiment.index,
                            title="–û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π"
                        )
                        st.plotly_chart(fig_overall, use_container_width=True)
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—â–µ–π –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
                
                with col2:
                    # –¢–æ–ø —Ç–µ–º (–∏—Å–∫–ª—é—á–∞–µ–º NaN)
                    topic_counts = filtered_df["topic"].value_counts()
                    if not topic_counts.empty:
                        # –£–±–∏—Ä–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
                        topic_counts = topic_counts[topic_counts.index.notna()]
                        top_topics = topic_counts.head(10)
                        
                        if not top_topics.empty:
                            fig_topics = px.bar(
                                x=top_topics.values,
                                y=top_topics.index,
                                orientation='h',
                                title="–¢–æ–ø-10 —Å–∞–º—ã—Ö —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö —Ç–µ–º",
                                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', 'y': '–¢–µ–º—ã'}
                            )
                            fig_topics.update_layout(yaxis={'categoryorder':'total ascending'})
                            st.plotly_chart(fig_topics, use_container_width=True)
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø-—Ç–µ–º")
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–º–∞–º")

            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç API.")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        st.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")