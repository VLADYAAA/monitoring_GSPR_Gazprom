import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", layout="wide")
st.image("orig.png", width=120)
st.title("–î–∞—à–±–æ—Ä–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –ø—Ä–æ–±–ª–µ–º")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –æ—Ç–∑—ã–≤–∞–º–∏", type="json")

if uploaded_file is not None:
    try:
        reviews_data = json.load(uploaded_file)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        reviews_df = pd.DataFrame(reviews_data["data"])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
        def fetch_predictions(data):
            url = "http://localhost:8000/predict"
            response = requests.post(url, json=data)
            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.text}")
                return None

        predictions_data = fetch_predictions(reviews_data)

        if predictions_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            flat_data = []
            for pred in predictions_data:
                for topic, sentiment in zip(pred["topics"], pred["sentiments"]):
                    flat_data.append({"id": pred["id"], "topic": topic, "sentiment": sentiment})
            flat_df = pd.DataFrame(flat_data)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            merged_df = reviews_df.merge(flat_df, on="id", how="left")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥")
            topics = merged_df["topic"].unique()
            st.write(list(topics))

            # 1. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ù–ê–õ–¨–ù–û–°–¢–ï–ô –ü–û –¢–ï–ú–ê–ú (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            st.subheader("‚öñÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–∞–º")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            pivot_data = merged_df.groupby(['topic', 'sentiment']).size().unstack(fill_value=0)
            
            # –°–æ–∑–¥–∞–µ–º stacked bar chart
            fig_topic_sentiment = go.Figure()
            
            colors = {'positive': '#2E8B57', 'negative': '#DC143C', 'neutral': '#FFD700'}
            
            for sentiment in ['positive', 'negative', 'neutral']:
                if sentiment in pivot_data.columns:
                    fig_topic_sentiment.add_trace(go.Bar(
                        name=sentiment.capitalize(),
                        x=pivot_data.index,
                        y=pivot_data[sentiment],
                        marker_color=colors[sentiment]
                    ))
            
            fig_topic_sentiment.update_layout(
                barmode='stack',
                xaxis_title="–¢–µ–º—ã",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤",
                legend_title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
            )
            st.plotly_chart(fig_topic_sentiment, use_container_width=True)

            # 2. –û–ë–©–ï–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ù–ê–õ–¨–ù–û–°–¢–ï–ô
            st.subheader("üìä –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π")
            
            sentiment_counts = merged_df['sentiment'].value_counts()
            fig_pie = px.pie(
                values=sentiment_counts.values, 
                names=sentiment_counts.index,
                color=sentiment_counts.index,
                color_discrete_map=colors
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)

            # 3. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ï–ú (–±–µ–∑ —É—á–µ—Ç–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
            st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º")
            
            topic_counts = merged_df['topic'].value_counts()
            fig_topics = px.bar(
                x=topic_counts.index,
                y=topic_counts.values,
                labels={'x': '–¢–µ–º—ã', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π'},
                color=topic_counts.values,
                color_continuous_scale='Viridis'
            )
            fig_topics.update_layout(showlegend=False)
            st.plotly_chart(fig_topics, use_container_width=True)

            # 4. –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ï–ú–ê–ú
            st.subheader("üîç –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            detailed_stats = merged_df.groupby('topic')['sentiment'].value_counts().unstack(fill_value=0)
            detailed_stats['–í—Å–µ–≥–æ'] = detailed_stats.sum(axis=1)
            detailed_stats['% –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö'] = (detailed_stats.get('positive', 0) / detailed_stats['–í—Å–µ–≥–æ'] * 100).round(1)
            detailed_stats['% –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö'] = (detailed_stats.get('negative', 0) / detailed_stats['–í—Å–µ–≥–æ'] * 100).round(1)
            
            st.dataframe(detailed_stats.style.background_gradient(cmap='Blues'))

            # 5. –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –°–ü–ò–°–û–ö –û–¢–ó–´–í–û–í
            st.subheader("üìù –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
            
            selected_topic = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:", topics)
            
            if selected_topic:
                topic_reviews = merged_df[merged_df["topic"] == selected_topic]
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                selected_sentiment = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:", 
                                                ["–í—Å–µ", "positive", "negative", "neutral"])
                
                if selected_sentiment != "–í—Å–µ":
                    topic_reviews = topic_reviews[topic_reviews["sentiment"] == selected_sentiment]
                
                st.write(f"**–û—Ç–∑—ã–≤—ã –ø–æ —Ç–µ–º–µ: {selected_topic}**")
                
                for _, row in topic_reviews.iterrows():
                    sentiment_color = {
                        "positive": "üü¢",
                        "negative": "üî¥", 
                        "neutral": "‚ö™"
                    }.get(row["sentiment"], "‚ö™")
                    
                    with st.container():
                        st.write(f"{sentiment_color} **ID {row['id']}** ({row['sentiment']}):")
                        st.write(f"_{row['text']}_")
                        st.divider()

        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç API.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")